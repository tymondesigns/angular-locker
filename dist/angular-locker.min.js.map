/*! angular-locker v1.0.3 | (c) 2015 @tymondesigns | https://github.com/tymondesigns/angular-locker */
{"version":3,"sources":["angular-locker.min.js"],"names":["root","factory","define","amd","angular","exports","module","window","this","provider","_value","value","isFunction","_keyByVal","obj","Object","keys","filter","key","_error","msg","Error","defaults","driver","namespace","undefined","eventsEnabled","setDefaultDriver","getDefaultDriver","setDefaultNamespace","getDefaultNamespace","setEventsEnabled","enabled","getEventsEnabled","$get","$window","$rootScope","$parse","Locker","_registeredDrivers","local","localStorage","session","sessionStorage","_resolveDriver","hasOwnProperty","_deriveDriver","_driver","_namespace","_eventsEnabled","_separator","_watchers","_checkSupport","isUndefined","_supported","l","setItem","removeItem","e","_getPrefix","_serialize","toJson","_unserialize","fromJson","_event","name","payload","$emit","extend","_setItem","oldVal","_getItem","_exists","equals","oldValue","newValue","indexOf","getItem","_removeItem","prototype","put","isObject","forEach","isDefined","add","has","get","def","isArray","items","k","arguments","length","forget","pull","all","split","splice","join","clean","empty","clear","count","bind","$scope","$eval","assign","self","$id","$watch","newVal","unbind","getDriver","getNamespace","setNamespace","supported","drivers"],"mappings":"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","file":"angular-locker.min.js","sourcesContent":["/**\n * angular-locker\n *\n * A simple & configurable abstraction for local/session storage in angular projects.\n *\n * @link https://github.com/tymondesigns/angular-locker\n * @author Sean Tymon @tymondesigns\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(function () {\n            return factory(root.angular);\n        });\n    } else if (typeof exports === 'object') {\n        module.exports = factory(root.angular || (window && window.angular));\n    } else {\n        factory(root.angular);\n    }\n})(this, function (angular) {\n\n    'use strict';\n\n    angular.module('angular-locker', [])\n\n    .provider('locker', function () {\n\n        /**\n         * If value is a function then execute, otherwise return\n         *\n         * @param  {Mixed}  value\n         * @return {Mixed}\n         */\n        var _value = function (value) {\n            return angular.isFunction(value) ? value() : value;\n        };\n\n        /**\n         * Get the key of an object by the value\n         *\n         * @param  {Object}  obj\n         * @param  {Mixed}   value\n         * @return {String}\n         */\n        var _keyByVal = function (obj, value) {\n            return Object.keys(obj).filter(function (key) { return obj[key] === value; })[0];\n        };\n\n        /**\n         * Trigger an error\n         *\n         * @param  {String}  msg\n         * @return {void}\n         */\n        var _error = function (msg) {\n            throw new Error('[angular-locker] ' + msg);\n        };\n\n        /**\n         * Set the default driver and namespace\n         *\n         * @type {Object}\n         */\n        var defaults = {\n            driver: 'local',\n            namespace: undefined,\n            eventsEnabled: true\n        };\n\n        return {\n\n            /**\n             * Allow setting of default storage driver via `lockerProvider`\n             * e.g. lockerProvider.setDefaultDriver('session');\n             *\n             * @param {String}  driver\n             */\n            setDefaultDriver: function (driver) {\n                defaults.driver = _value(driver);\n\n                return this;\n            },\n\n            /**\n             * Get the default driver\n             */\n            getDefaultDriver: function () {\n                return defaults.driver;\n            },\n\n            /**\n             * Allow setting of default namespace via `lockerProvider`\n             * e.g. lockerProvider.setDefaultNamespace('myAppName');\n             *\n             * @param {String}  namespace\n             */\n            setDefaultNamespace: function (namespace) {\n                defaults.namespace = _value(namespace);\n\n                return this;\n            },\n\n            /**\n             * Get the default namespace\n             */\n            getDefaultNamespace: function () {\n                return defaults.namespace;\n            },\n\n            /**\n             * Set whether the events are enabled\n             *\n             * @param {Boolean}  enabled\n             */\n            setEventsEnabled: function (enabled) {\n                defaults.eventsEnabled = _value(enabled);\n\n                return this;\n            },\n\n            /**\n             * Get whether the events are enabled\n             */\n            getEventsEnabled: function () {\n                return defaults.eventsEnabled;\n            },\n\n            /**\n             * The locker service\n             */\n            $get: ['$window', '$rootScope', '$parse', function ($window, $rootScope, $parse) {\n\n                /**\n                 * Define the Locker class\n                 *\n                 * @param {Storage}  driver\n                 * @param {String}   namespace\n                 */\n                function Locker (driver, namespace, eventsEnabled) {\n\n                    /**\n                     * @type {Object}\n                     */\n                    this._registeredDrivers = {\n                        local: $window.localStorage,\n                        session: $window.sessionStorage\n                    };\n\n                    /**\n                     * Get the Storage instance from the key\n                     *\n                     * @param  {String}  driver\n                     * @return {Storage}\n                     */\n                    this._resolveDriver = function (driver) {\n                        if (! this._registeredDrivers.hasOwnProperty(driver)) {\n                            _error('The driver \"' + driver + '\" was not found.');\n                        }\n\n                        return this._registeredDrivers[driver];\n                    };\n\n                    /**\n                     * Get the driver key (local/session) by the Storage instance\n                     *\n                     * @param  {Storage}  driver\n                     * @return {String}\n                     */\n                    this._deriveDriver = function (driver) {\n                        return _keyByVal(this._registeredDrivers, driver);\n                    };\n\n                    /**\n                     * @type {Storage}\n                     */\n                    this._driver = this._resolveDriver(driver);\n\n                    /**\n                     * @type {String}\n                     */\n                    this._namespace = namespace;\n\n                    /**\n                     * @type {Boolean}\n                     */\n                    this._eventsEnabled = eventsEnabled;\n\n                    /**\n                     * @type {String}\n                     */\n                    this._separator = '.';\n\n                    /**\n                     * @type {Object}\n                     */\n                    this._watchers = {};\n\n                    /**\n                     * Check browser support\n                     *\n                     * @see https://github.com/Modernizr/Modernizr/blob/master/feature-detects/storage/localstorage.js#L38-L47\n                     * @param  {String}  driver\n                     * @return {Boolean}\n                     */\n                    this._checkSupport = function (driver) {\n                        if (angular.isUndefined(this._supported)) {\n                            var l = 'l';\n                            try {\n                                this._resolveDriver(driver || 'local').setItem(l, l);\n                                this._resolveDriver(driver || 'local').removeItem(l);\n                                this._supported = true;\n                            } catch (e) {\n                                this._supported = false;\n                            }\n                        }\n\n                        return this._supported;\n                    };\n\n                    /**\n                     * Build the storage key from the namspace\n                     *\n                     * @param  {String}  key\n                     * @return {String}\n                     */\n                    this._getPrefix = function (key) {\n                        if (!this._namespace) {\n                          return key;\n                        }\n                        else {\n                          return this._namespace + this._separator + key;\n                        }\n                    };\n\n                    /**\n                     * Try to encode value as json, or just return the value upon failure\n                     *\n                     * @param  {Mixed}  value\n                     * @return {Mixed}\n                     */\n                    this._serialize = function (value) {\n                        try {\n                            return angular.toJson(value);\n                        } catch (e) {\n                            return value;\n                        }\n                    };\n\n                    /**\n                     * Try to parse value as json, if it fails then it probably isn't json so just return it\n                     *\n                     * @param  {String}  value\n                     * @return {Object|String}\n                     */\n                    this._unserialize = function (value) {\n                        try {\n                            return angular.fromJson(value);\n                        } catch (e) {\n                            return value;\n                        }\n                    };\n\n                    /**\n                     * Trigger an event\n                     *\n                     * @param  {String} name\n                     * @param  {Object} payload\n                     * @return {void}\n                     */\n                    this._event = function (name, payload) {\n                        if (this._eventsEnabled) {\n                            $rootScope.$emit(name, angular.extend(payload, {\n                                driver: this._deriveDriver(this._driver),\n                                namespace: this._namespace,\n                            }));\n                        }\n                    };\n\n                    /**\n                     * Add to storage\n                     *\n                     * @param {String}  key\n                     * @param {Mixed}  value\n                     */\n                    this._setItem = function (key, value) {\n                        if (this._checkSupport()) {\n                            try {\n                                var oldVal = this._getItem(key);\n                                this._driver.setItem(this._getPrefix(key), this._serialize(value));\n                                if (this._exists(key) && ! angular.equals(oldVal, value)) {\n                                    this._event('locker.item.updated', { key: key, oldValue: oldVal, newValue: value });\n                                } else {\n                                    this._event('locker.item.added', { key: key, value: value });\n                                }\n                            } catch (e) {\n                                if (['QUOTA_EXCEEDED_ERR', 'NS_ERROR_DOM_QUOTA_REACHED', 'QuotaExceededError'].indexOf(e.name) !== -1) {\n                                    _error('The browser storage quota has been exceeded');\n                                } else {\n                                    _error('Could not add item with key \"' + key + '\"');\n                                }\n                            }\n                        } else {\n                            _error('The browser does not support localStorage');\n                        }\n                    };\n\n                    /**\n                     * Get from storage\n                     *\n                     * @param  {String}  key\n                     * @return {Mixed}\n                     */\n                    this._getItem = function (key) {\n                        if (this._checkSupport()) {\n                            return this._unserialize(this._driver.getItem(this._getPrefix(key)));\n                        } else {\n                            _error('The browser does not support localStorage');\n                        }\n                    };\n\n                    /**\n                     * Exists in storage\n                     *\n                     * @param  {String}  key\n                     * @return {Boolean}\n                     */\n                    this._exists = function (key) {\n                        if (this._checkSupport()) {\n                            return this._driver.hasOwnProperty(this._getPrefix(_value(key)));\n                        } else {\n                            _error('The browser does not support localStorage');\n                        }\n                    };\n\n                    /**\n                     * Remove from storage\n                     *\n                     * @param  {String}  key\n                     * @return {Boolean}\n                     */\n                    this._removeItem = function (key) {\n                        if (this._checkSupport()) {\n                            if (! this._exists(key)) return false;\n                            this._driver.removeItem(this._getPrefix(key));\n\n                            this._event('locker.item.forgotten', { key: key });\n\n                            return true;\n                        } else {\n                            _error('The browser does not support localStorage');\n                        }\n                    };\n                }\n\n                /**\n                 * Define the public api\n                 *\n                 * @type {Object}\n                 */\n                Locker.prototype = {\n\n                    /**\n                     * Add a new item to storage (even if it already exists)\n                     *\n                     * @param  {Mixed}  key\n                     * @param  {Mixed}  value\n                     * @return {self}\n                     */\n                    put: function (key, value) {\n                        if (! key) return false;\n                        key = _value(key);\n\n                        if (angular.isObject(key)) {\n                            angular.forEach(key, function (value, key) {\n                                this._setItem(key, value);\n                            }, this);\n                        } else {\n                            if (! angular.isDefined(value)) return false;\n                            this._setItem(key, _value(value));\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Add an item to storage if it doesn't already exist\n                     *\n                     * @param  {Mixed}  key\n                     * @param  {Mixed}  value\n                     * @return {Boolean}\n                     */\n                    add: function (key, value) {\n                        if (! this.has(key)) {\n                            this.put(key, value);\n                            return true;\n                        }\n\n                        return false;\n                    },\n\n                    /**\n                     * Retrieve the specified item from storage\n                     *\n                     * @param  {String|Array}  key\n                     * @param  {Mixed}  def\n                     * @return {Mixed}\n                     */\n                    get: function (key, def) {\n                        if (angular.isArray(key)) {\n                            var items = {};\n                            angular.forEach(key, function (k) {\n                                if (this.has(k)) items[k] = this._getItem(k);\n                            }, this);\n\n                            return items;\n                        }\n\n                        if (! this.has(key)) return arguments.length === 2 ? def : void 0;\n\n                        return this._getItem(key);\n                    },\n\n                    /**\n                     * Determine whether the item exists in storage\n                     *\n                     * @param  {String|Function}  key\n                     * @return {Boolean}\n                     */\n                    has: function (key) {\n                        return this._exists(key);\n                    },\n\n                    /**\n                     * Remove specified item(s) from storage\n                     *\n                     * @param  {Mixed}  key\n                     * @return {Object}\n                     */\n                    forget: function (key) {\n                        key = _value(key);\n\n                        if (angular.isArray(key)) {\n                            angular.forEach(key, function (key) {\n                                this._removeItem(key);\n                            }, this);\n                        } else {\n                            this._removeItem(key);\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Retrieve the specified item from storage and then remove it\n                     *\n                     * @param  {String|Array}  key\n                     * @param  {Mixed}  def\n                     * @return {Mixed}\n                     */\n                    pull: function (key, def) {\n                        var value = this.get(key, def);\n                        this.forget(key);\n\n                        return value;\n                    },\n\n                    /**\n                     * Return all items in storage within the current namespace\n                     *\n                     * @return {Object}\n                     */\n                    all: function () {\n                        var items = {};\n                        angular.forEach(this._driver, function (value, key) {\n                            var split = key.split(this._separator);\n                            if (split.length > 1 && split[0] === this._namespace) {\n                                split.splice(0, 1);\n                                key = split.join(this._separator);\n                            }\n                            if (this.has(key)) items[key] = this.get(key);\n                        }, this);\n\n                        return items;\n                    },\n\n                    /**\n                     * Remove all items set within the current namespace\n                     *\n                     * @return {self}\n                     */\n                    clean: function () {\n                        this.forget(Object.keys(this.all()));\n\n                        return this;\n                    },\n\n                    /**\n                     * Empty the current storage driver completely. careful now.\n                     *\n                     * @return {self}\n                     */\n                    empty: function () {\n                        this._driver.clear();\n\n                        return this;\n                    },\n\n                    /**\n                     * Get the total number of items within the current namespace\n                     *\n                     * @return {Integer}\n                     */\n                    count: function () {\n                        return Object.keys(this.all()).length;\n                    },\n\n                    /**\n                     * Bind a storage key to a $scope property\n                     *\n                     * @param  {Object}  $scope\n                     * @param  {String}  key\n                     * @param  {Mixed}   def\n                     * @return {self}\n                     */\n                    bind: function ($scope, key, def) {\n                        if (angular.isUndefined( $scope.$eval(key) )) {\n                            $parse(key).assign($scope, this.get(key, def));\n                            if (! this.has(key)) this.put(key, def);\n                        }\n\n                        var self = this;\n                        this._watchers[key + $scope.$id] = $scope.$watch(key, function (newVal) {\n                            if (angular.isDefined(newVal)) self.put(key, newVal);\n                        }, angular.isObject($scope[key]));\n\n                        return this;\n                    },\n\n                    /**\n                     * Unbind a storage key from a $scope property\n                     *\n                     * @param  {Object}  $scope\n                     * @param  {String}  key\n                     * @return {self}\n                     */\n                    unbind: function ($scope, key) {\n                        $parse(key).assign($scope, void 0);\n                        this.forget(key);\n                        if (this._watchers[key + $scope.$id]) {\n                            // execute the de-registration function\n                            this._watchers[key + $scope.$id]();\n                            delete this._watchers[key + $scope.$id];\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Set the storage driver on a new instance to enable overriding defaults\n                     *\n                     * @param  {String}  driver\n                     * @return {self}\n                     */\n                    driver: function (driver) {\n                        return new Locker(driver, this._namespace, this._eventsEnabled);\n                    },\n\n                    /**\n                     * Get the currently set driver\n                     *\n                     * @return {Storage}\n                     */\n                    getDriver: function () {\n                        return this._driver;\n                    },\n\n                    /**\n                     * Set the namespace on a new instance to enable overriding defaults\n                     *\n                     * @param  {String}  namespace\n                     * @return {self}\n                     */\n                    namespace: function (namespace) {\n                        return new Locker(this._deriveDriver(this._driver), namespace, this._eventsEnabled);\n                    },\n\n                    /**\n                     * Get the currently set namespace\n                     *\n                     * @return {String}\n                     */\n                    getNamespace: function () {\n                        return this._namespace;\n                    },\n\n                    /**\n                    * Set the current namespace\n                    *\n                    * @return {String}\n                    */\n                    setNamespace: function (namespace) {\n                      this._namespace = namespace;\n                    },\n\n                    /**\n                     * Check browser support\n                     *\n                     * @see https://github.com/Modernizr/Modernizr/blob/master/feature-detects/storage/localstorage.js#L38-L47\n                     * @param  {String}  driver\n                     * @return {Boolean}\n                     */\n                    supported: function (driver) {\n                        return this._checkSupport(driver);\n                    }\n                };\n\n                /**\n                 * Create the driver instances\n                 *\n                 * @type {Object}\n                 */\n                var drivers = {\n                    local: new Locker('local', defaults.namespace, defaults.eventsEnabled),\n                    session: new Locker('session', defaults.namespace, defaults.eventsEnabled)\n                };\n\n                return drivers[defaults.driver];\n            }]\n        };\n\n    });\n\n});\n"],"sourceRoot":"/source/"}