/*! angular-locker v2.0.0 | (c) 2015 @tymondesigns | https://github.com/tymondesigns/angular-locker */
{"version":3,"sources":["angular-locker.min.js"],"names":["root","factory","define","amd","angular","exports","module","window","this","provider","_value","value","param","isFunction","_defined","isDefined","_error","msg","Error","defaults","driver","namespace","eventsEnabled","separator","extend","forEach","val","key","hasOwnProperty","$get","$window","$rootScope","$parse","Locker","options","_options","_registeredDrivers","session","sessionStorage","local","localStorage","e","_resolveDriver","_driver","_namespace","_separator","_watchers","_checkSupport","_supported","l","setItem","removeItem","_getPrefix","_serialize","toJson","_unserialize","fromJson","_event","name","payload","$emit","_setItem","oldVal","_getItem","_exists","equals","oldValue","newValue","indexOf","getItem","_removeItem","prototype","put","def","isObject","add","has","get","isArray","items","k","arguments","length","forget","map","pull","all","prefix","substring","keys","Object","clean","empty","clear","count","bind","$scope","$eval","assign","self","$id","$watch","newVal","unbind","watchId","instance","getDriver","getNamespace","supported"],"mappings":"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","file":"angular-locker.min.js","sourcesContent":["/**\n * angular-locker\n *\n * A simple & configurable abstraction for local/session storage in angular projects.\n *\n * @link https://github.com/tymondesigns/angular-locker\n * @author Sean Tymon @tymondesigns\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(function () {\n            return factory(root.angular);\n        });\n    } else if (typeof exports === 'object') {\n        module.exports = factory(root.angular || (window && window.angular));\n    } else {\n        factory(root.angular);\n    }\n})(this, function (angular) {\n\n    'use strict';\n\n    angular.module('angular-locker', [])\n\n    .provider('locker', function () {\n\n        /**\n         * If value is a function then execute, otherwise return\n         *\n         * @param  {Mixed}  value\n         * @param  {Mixed}  param\n         *\n         * @return {Mixed}\n         */\n        var _value = function (value, param) {\n            return angular.isFunction(value) ? value(param) : value;\n        };\n\n        /**\n         * Determine whether a value is defined and not null\n         *\n         * @param  {Mixed}  value\n         *\n         * @return {Boolean}\n         */\n        var _defined = function (value) {\n            return angular.isDefined(value) && value !== null;\n        };\n\n        /**\n         * Trigger an error\n         *\n         * @param  {String}  msg\n         */\n        var _error = function (msg) {\n            throw new Error('[angular-locker] ' + msg);\n        };\n\n        /**\n         * Set the defaults\n         *\n         * @type {Object}\n         */\n        var defaults = {\n            driver: 'local',\n            namespace: 'locker',\n            eventsEnabled: true,\n            separator: '.',\n            extend: {}\n        };\n\n        return {\n\n            /**\n             * Allow the defaults to be specified via the `lockerProvider`\n             *\n             * @param {Object}  value\n             */\n            defaults: function (value) {\n                if (! _defined(value)) return defaults;\n\n                angular.forEach(value, function (val, key) {\n                    if (defaults.hasOwnProperty(key)) defaults[key] = val;\n                });\n            },\n\n            /**\n             * The locker service\n             */\n            $get: ['$window', '$rootScope', '$parse', function ($window, $rootScope, $parse) {\n\n                /**\n                 * Define the Locker class\n                 *\n                 * @param {Object}  options\n                 */\n                function Locker (options) {\n\n                    /**\n                     * The config options\n                     *\n                     * @type {Object}\n                     */\n                    this._options = options;\n\n                    /**\n                     * Out of the box drivers\n                     *\n                     * @type {Object}\n                     */\n                    this._registeredDrivers = angular.extend({\n                        session: $window.sessionStorage\n                    }, options.extend);\n                    // IE may throw an exception when accessing localStorage\n                    try {\n                        this._registeredDrivers.local = $window.localStorage;\n                    } catch (e) {}\n\n                    /**\n                     * Get the Storage instance from the key\n                     *\n                     * @param  {String}  driver\n                     *\n                     * @return {Storage}\n                     */\n                    this._resolveDriver = function (driver) {\n                        if (! this._registeredDrivers.hasOwnProperty(driver)) {\n                            _error('The driver \"' + driver + '\" was not found.');\n                        }\n\n                        return this._registeredDrivers[driver];\n                    };\n\n                    /**\n                     * The driver instance\n                     *\n                     * @type {Storage}\n                     */\n                    this._driver = this._resolveDriver(options.driver);\n\n                    /**\n                     * The namespace value\n                     *\n                     * @type {String}\n                     */\n                    this._namespace = options.namespace;\n\n                    /**\n                     * Separates the namespace from the keys\n                     *\n                     * @type {String}\n                     */\n                    this._separator = options.separator;\n\n                    /**\n                     * Store the watchers here so we can un-register them later\n                     *\n                     * @type {Object}\n                     */\n                    this._watchers = {};\n\n                    /**\n                     * Check browser support\n                     *\n                     * @see github.com/Modernizr/Modernizr/blob/master/feature-detects/storage/localstorage.js#L38-L47\n                     * @param  {String}  driver\n                     *\n                     * @return {Boolean}\n                     */\n                    this._checkSupport = function (driver) {\n                        if (! _defined(this._supported)) {\n                            var l = 'l';\n                            try {\n                                this._resolveDriver(driver || 'local').setItem(l, l);\n                                this._resolveDriver(driver || 'local').removeItem(l);\n                                this._supported = true;\n                            } catch (e) {\n                                this._supported = false;\n                            }\n                        }\n\n                        return this._supported;\n                    };\n\n                    /**\n                     * Build the storage key from the namspace\n                     *\n                     * @param  {String}  key\n                     *\n                     * @return {String}\n                     */\n                    this._getPrefix = function (key) {\n                        if (! this._namespace) return key;\n\n                        return this._namespace + this._separator + key;\n                    };\n\n                    /**\n                     * Try to encode value as json, or just return the value upon failure\n                     *\n                     * @param  {Mixed}  value\n                     *\n                     * @return {Mixed}\n                     */\n                    this._serialize = function (value) {\n                        try {\n                            return angular.toJson(value);\n                        } catch (e) {\n                            return value;\n                        }\n                    };\n\n                    /**\n                     * Try to parse value as json, if it fails then it probably isn't json\n                     * so just return it\n                     *\n                     * @param  {String}  value\n                     *\n                     * @return {Mixed}\n                     */\n                    this._unserialize = function (value) {\n                        try {\n                            return angular.fromJson(value);\n                        } catch (e) {\n                            return value;\n                        }\n                    };\n\n                    /**\n                     * Trigger an event\n                     *\n                     * @param  {String}  name\n                     * @param  {Object}  payload\n                     */\n                    this._event = function (name, payload) {\n                        if (this._options.eventsEnabled) {\n                            $rootScope.$emit(name, angular.extend(payload, {\n                                driver: this._options.driver,\n                                namespace: this._namespace,\n                            }));\n                        }\n                    };\n\n                    /**\n                     * Add to storage\n                     *\n                     * @param {String}  key\n                     *\n                     * @param {Mixed}   value\n                     */\n                    this._setItem = function (key, value) {\n                        if (! this._checkSupport()) _error('The browser does not support localStorage');\n\n                        try {\n                            var oldVal = this._getItem(key);\n                            this._driver.setItem(this._getPrefix(key), this._serialize(value));\n                            if (this._exists(key) && ! angular.equals(oldVal, value)) {\n                                this._event('locker.item.updated', { key: key, oldValue: oldVal, newValue: value });\n                            } else {\n                                this._event('locker.item.added', { key: key, value: value });\n                            }\n                        } catch (e) {\n                            if (['QUOTA_EXCEEDED_ERR',\n                                'NS_ERROR_DOM_QUOTA_REACHED',\n                                'QuotaExceededError'].indexOf(e.name) !== -1) {\n                                _error('The browser storage quota has been exceeded');\n                            } else {\n                                _error('Could not add item with key \"' + key + '\"');\n                            }\n                        }\n                    };\n\n                    /**\n                     * Get from storage\n                     *\n                     * @param  {String}  key\n                     *\n                     * @return {Mixed}\n                     */\n                    this._getItem = function (key) {\n                        if (! this._checkSupport()) _error('The browser does not support localStorage');\n\n                        return this._unserialize(this._driver.getItem(this._getPrefix(key)));\n                    };\n\n                    /**\n                     * Exists in storage\n                     *\n                     * @param  {String}  key\n                     *\n                     * @return {Boolean}\n                     */\n                    this._exists = function (key) {\n                        if (! this._checkSupport()) _error('The browser does not support localStorage');\n\n                        return this._driver.hasOwnProperty(this._getPrefix(_value(key)));\n                    };\n\n                    /**\n                     * Remove from storage\n                     *\n                     * @param  {String}  key\n                     *\n                     * @return {Boolean}\n                     */\n                    this._removeItem = function (key) {\n                        if (! this._checkSupport()) _error('The browser does not support localStorage');\n\n                        if (! this._exists(key)) return false;\n\n                        this._driver.removeItem(this._getPrefix(key));\n                        this._event('locker.item.forgotten', { key: key });\n\n                        return true;\n                    };\n                }\n\n                /**\n                 * Define the public api\n                 *\n                 * @type {Object}\n                 */\n                Locker.prototype = {\n\n                    /**\n                     * Add a new item to storage (even if it already exists)\n                     *\n                     * @param  {Mixed}  key\n                     * @param  {Mixed}  value\n                     * @param  {Mixed}  def\n                     *\n                     * @return {Locker|Boolean}\n                     */\n                    put: function (key, value, def) {\n                        if (! _defined(key)) return false;\n                        key = _value(key);\n\n                        if (angular.isObject(key)) {\n                            angular.forEach(key, function (value, key) {\n                                this._setItem(key, _defined(value) ? value : def);\n                            }, this);\n                        } else {\n                            if (! _defined(value)) return false;\n                            var val = this._getItem(key);\n                            this._setItem(key, _value(value, _defined(val) ? val : def));\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Add an item to storage if it doesn't already exist\n                     *\n                     * @param  {Mixed}  key\n                     * @param  {Mixed}  value\n                     * @param  {Mixed}  def\n                     *\n                     * @return {Boolean}\n                     */\n                    add: function (key, value, def) {\n                        if (! this.has(key)) {\n                            this.put(key, value, def);\n                            return true;\n                        }\n\n                        return false;\n                    },\n\n                    /**\n                     * Retrieve the specified item from storage\n                     *\n                     * @param  {String|Array}  key\n                     * @param  {Mixed}  def\n                     *\n                     * @return {Mixed}\n                     */\n                    get: function (key, def) {\n                        if (angular.isArray(key)) {\n                            var items = {};\n                            angular.forEach(key, function (k) {\n                                if (this.has(k)) items[k] = this._getItem(k);\n                            }, this);\n\n                            return items;\n                        }\n\n                        if (! this.has(key)) return arguments.length === 2 ? def : void 0;\n\n                        return this._getItem(key);\n                    },\n\n                    /**\n                     * Determine whether the item exists in storage\n                     *\n                     * @param  {String|Function}  key\n                     *\n                     * @return {Boolean}\n                     */\n                    has: function (key) {\n                        return this._exists(key);\n                    },\n\n                    /**\n                     * Remove specified item(s) from storage\n                     *\n                     * @param  {Mixed}  key\n                     *\n                     * @return {Object}\n                     */\n                    forget: function (key) {\n                        key = _value(key);\n\n                        if (angular.isArray(key)) {\n                            key.map(this._removeItem, this);\n                        } else {\n                            this._removeItem(key);\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Retrieve the specified item from storage and then remove it\n                     *\n                     * @param  {String|Array}  key\n                     * @param  {Mixed}  def\n                     *\n                     * @return {Mixed}\n                     */\n                    pull: function (key, def) {\n                        var value = this.get(key, def);\n                        this.forget(key);\n\n                        return value;\n                    },\n\n                    /**\n                     * Return all items in storage within the current namespace/driver\n                     *\n                     * @return {Object}\n                     */\n                    all: function () {\n                        var items = {};\n                        angular.forEach(this._driver, function (value, key) {\n                            if (this._namespace) {\n                                var prefix = this._namespace + this._separator;\n                                if (key.indexOf(prefix) === 0) key = key.substring(prefix.length);\n                            }\n                            if (this.has(key)) items[key] = this.get(key);\n                        }, this);\n\n                        return items;\n                    },\n\n                    /**\n                     * Get the storage keys as an array\n                     *\n                     * @return {Array}\n                     */\n                    keys: function () {\n                        return Object.keys(this.all());\n                    },\n\n                    /**\n                     * Remove all items set within the current namespace/driver\n                     *\n                     * @return {self}\n                     */\n                    clean: function () {\n                        return this.forget(this.keys());\n                    },\n\n                    /**\n                     * Empty the current storage driver completely. careful now.\n                     *\n                     * @return {Locker}\n                     */\n                    empty: function () {\n                        this._driver.clear();\n\n                        return this;\n                    },\n\n                    /**\n                     * Get the total number of items within the current namespace\n                     *\n                     * @return {Integer}\n                     */\n                    count: function () {\n                        return this.keys().length;\n                    },\n\n                    /**\n                     * Bind a storage key to a $scope property\n                     *\n                     * @param  {Object}  $scope\n                     * @param  {String}  key\n                     * @param  {Mixed}   def\n                     *\n                     * @return {Locker}\n                     */\n                    bind: function ($scope, key, def) {\n                        if (! _defined( $scope.$eval(key) )) {\n                            $parse(key).assign($scope, this.get(key, def));\n                            this.add(key, def);\n                        }\n\n                        var self = this;\n                        this._watchers[key + $scope.$id] = $scope.$watch(key, function (newVal) {\n                            self.put(key, newVal);\n                        }, angular.isObject($scope[key]));\n\n                        return this;\n                    },\n\n                    /**\n                     * Unbind a storage key from a $scope property\n                     *\n                     * @param  {Object}  $scope\n                     * @param  {String}  key\n                     *\n                     * @return {Locker}\n                     */\n                    unbind: function ($scope, key) {\n                        $parse(key).assign($scope, void 0);\n                        this.forget(key);\n\n                        var watchId = key + $scope.$id;\n\n                        if (this._watchers[watchId]) {\n                            // execute the de-registration function\n                            this._watchers[watchId]();\n                            delete this._watchers[watchId];\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Set the storage driver on a new instance to enable overriding defaults\n                     *\n                     * @param  {String}  driver\n                     *\n                     * @return {Locker}\n                     */\n                    driver: function (driver) {\n                        // no need to create a new instance if the driver is the same\n                        if (driver === this._options.driver) return this;\n\n                        return this.instance(angular.extend(this._options, { driver: driver }));\n                    },\n\n                    /**\n                     * Get the currently set driver\n                     *\n                     * @return {Storage}\n                     */\n                    getDriver: function () {\n                        return this._driver;\n                    },\n\n                    /**\n                     * Set the namespace on a new instance to enable overriding defaults\n                     *\n                     * @param  {String}  namespace\n                     *\n                     * @return {Locker}\n                     */\n                    namespace: function (namespace) {\n                        // no need to create a new instance if the namespace is the same\n                        if (namespace === this._namespace) return this;\n\n                        return this.instance(angular.extend(this._options, { namespace: namespace }));\n                    },\n\n                    /**\n                     * Get the currently set namespace\n                     *\n                     * @return {String}\n                     */\n                    getNamespace: function () {\n                        return this._namespace;\n                    },\n\n                    /**\n                     * Check browser support\n                     *\n                     * @see github.com/Modernizr/Modernizr/blob/master/feature-detects/storage/localstorage.js#L38-L47\n                     * @param  {String}  driver\n                     * @return {Boolean}\n                     */\n                    supported: function (driver) {\n                        return this._checkSupport(driver);\n                    },\n\n                    /**\n                     * Get a new instance of Locker\n                     *\n                     * @param  {Object}  options\n                     *\n                     * @return {Locker}\n                     */\n                    instance: function (options) {\n                        return new Locker(options);\n                    }\n                };\n\n                // return the default instance\n                return new Locker(defaults);\n            }]\n        };\n\n    });\n\n});\n"],"sourceRoot":"/source/"}